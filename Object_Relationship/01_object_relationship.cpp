// 01_object_relationship.cpp

/*
	Object Relationship - 객체 관계

	- Composition(구성) part-of
		ㅁ 특정 클래스(전체)의 기능 일부를 다른 클래스(부품)에서 분담하는 것
		ㅁ 부품 클래스는 전체 클래스에만 포함되어 있으며 다른 클래스에는 포함되지 않는다.
		ㅁ 전체/부품 클래스의 생명주기를 공유한다. -> 전체가 사라지면 부품도 소멸
		ㅁ 육체/두뇌 관계로 볼 수 있다.

	- Aggregation(집합) has-a
		ㅁ 특정 클래스(전체)의 기능 일부를 한개 이상의 다른 클래스(부품)에서 분담하는 것
		ㅁ 전체/부품 클래스의 생명주기를 공유하지 않는다 -> 같이 생성 되지만 전체가 사라져도 부품이 존재할 수 있다.
		ㅁ 사람/자동차 관계로 볼 수 있다.

	- Association(연계) uses-a
		ㅁ 특정 클래스가 다른 클래스의 참조 변수를 멤버로 선언한 경우
		ㅁ 서로 독립적인 기능을 가지고 있으며 다른 클래스의 협조가 필요하기에 참조만 가질 뿐이다.
		ㅁ 한 쪽만 참조를 가질 수 있고 둘다 가질 수도 있다.
		-> 서로에게 영향을 끼칠 수 있다(커플링관계라고도 부르며 유지보수가 힘든 방식)
		ㅁ 생성/소멸시기가 서로 다르다.
		ㅁ 의사/환자의 관계로 볼 수 있다.

	- Dependency(의존)  depend-on
		ㅁ 특정 클래스가 다른 클래스의 기능을 잠시 도구로 사용하는 관계
		ㅁ 연결 강도가 가장 약한 관계이다.
		ㅁ 다른 클래스를 필요할 경우 생성하고 필요없을 시 소멸시킨다.
		ㅁ 사람/목발 관계로 볼 수 있다.

	추가
	- Inheritance(상속) is-a
		ㅁ 특정 클래스가 다른 클래스의 기능과 속성을 물려받는 관계(상속)
		ㅁ 부모/자식 관계, 기반/파생 클래스의 관계라고도 한다.
		ㅁ 고양이(자식)는 동물(부모)이다.

										   관계 형태    다른 클래스에 속할수 있는가  멤버의 존재를 클래스가 관리  방향성
	Composition(구성)     part-of     전체/부품                   No                        Yes             단방향
	Aggregation(집합)     has-a       전체/부품                   Yes                       No              단방향
	Association(연계)     uses-a      용도 외엔 무관              Yes                       No              단방향 or 양방향
	Dependency(의존)      depends-on  옹도 외엔 무관              Yes                       Yes             단방향
*/


// 과제 : 결합도/응집도 조사하기